// Copyright (c) 2015, Baidu.com. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import "src/proto/status_code.proto";

package baidu.heimdallr.server;
option cc_generic_services = true;

////// Service //////
message AddServiceRequest {
  optional string service_name = 1;
}

message AddServiceResponse {
  optional StatusCode status = 1;
}

message SetServiceResourceRequest {
  optional string service_name = 1;
  optional string resource_name = 2;
  optional string provider_name = 3;
  optional int64 quantity = 4;
}

message SetServiceResourceResponse {
  optional StatusCode status = 1;
}

message ListServiceRequest {
  optional string service_name = 1;
}

message ListServiceResponse {
  optional Service services = 1;
  optional string service_info = 2;
  optional StatusCode status = 3;
}

////// Group //////
message AddGroupRequest {
  optional string group_name = 1;
}

message AddGroupResponse {
  optional StatusCode status = 1;
}

message SetGroupQuotaRequest {
  optional string group_name = 1;
  optional string service_name = 2;
  optional int64 host = 4;
  optional int64 cpu = 5;
  optional int64 mem = 6;
  optional int64 disk = 7;
  optional int64 flash = 8;
}

message SetGroupQuotaResponse {
  optional StatusCode status = 1;
}

message ListGroupRequest {
  optional string group_name = 1;
}

message ListGroupResponse {
  // repeated string services = 1;
  optional Group group = 3;
  optional string group_info = 1;
  optional StatusCode status = 2;
}

message AddAppRequest {
  optional string group_name = 1;
  optional string app_name = 2;
  optional string app_id = 3;
  optional int64 host = 4;
  optional int64 cpu = 5;
  optional int64 mem = 6;
  optional int64 disk = 7;
  optional int64 flash = 8;
}

message AddAppResponse {
  optional StatusCode status = 1;
}

message DelAppRequest {
  optional string group_name = 1;
  optional string app_name = 2;
  optional string app_id = 3;
}

message DelAppResponse {
  optional StatusCode status = 1;
}

////// User //////
message AddUserRequest {
  optional string user_name = 1;
  optional string passwd = 2;
}

message AddUserResponse {
  optional StatusCode status = 1;
}

message AddUserToGroupRequest {
  optional string user_name = 1;
  optional string group_name = 2;
}

message AddUserToGroupResponse {
  optional StatusCode status = 1;
}

message ListUserRequest {
  optional string user_name = 1;
}

message ListUserResponse {
  optional User user = 1;
  optional string user_info = 2;
  optional StatusCode status = 3;
}

////// helpers //////
message History {
  optional int64 capacity = 1;
  optional int32 ts = 2;
}

message Resource {
  optional string resource_name = 1;
  optional int64 capacity = 2;
  repeated UsedBy used_by = 3;
  optional int64 left = 4;
  repeated History history = 5;
}

message Provider {
  optional string resource_name = 1;
  optional string name = 2;
  optional int64 quantity = 3;
  optional int32 ts = 4;
}

message UsedBy {
  optional string group_name = 1;
  optional int64 quantity = 2;
  optional int32 ts = 3;
}

message Service {
  optional string service_name = 1;
  repeated Resource resources = 2;
  repeated Provider providers = 3;
}

message User {
  optional string user_name = 1;
  optional string token = 2;
  repeated string groups = 3;
}

message Quota {
  optional string service_name = 1;
  optional string resource_name = 2;
  optional int64 quota = 3;
  optional int32 ts = 4;
}

message Group {
  optional string group_name = 1;
  // repeated Quota quota = 2;
  optional int64 host_quota = 3;
  optional int64 host_left = 4;
  optional int64 cpu_quota = 5;
  optional int64 cpu_left = 6;
  optional int64 mem_quota = 7;
  optional int64 mem_left = 8;
  optional int64 disk_quota = 9;
  optional int64 disk_left = 10;
  optional int64 flash_quota = 11;
  optional int64 flash_left = 12;
  repeated string users = 13;
  repeated App apps = 14;
}

message App {
  optional string name = 1;
  optional string id = 2;
  optional int64 host = 3;
  optional int64 cpu = 4;
  optional int64 mem = 5;
  optional int64 disk = 6;
  optional int64 flash = 7;
}

service Server {
  ////// Service //////
  rpc AddService(AddServiceRequest) returns(AddServiceResponse);
  rpc SetServiceResource(SetServiceResourceRequest) returns(SetServiceResourceResponse);
  rpc ListService(ListServiceRequest) returns(ListServiceResponse);

  ////// Group //////
  rpc AddGroup(AddGroupRequest) returns(AddGroupResponse);
  rpc SetGroupQuota(SetGroupQuotaRequest) returns(SetGroupQuotaResponse);
  rpc ListGroup(ListGroupRequest) returns(ListGroupResponse);
  rpc AddApp(AddAppRequest) returns(AddAppResponse);
  rpc DelApp(DelAppRequest) returns(DelAppResponse);

  ////// User //////
  rpc AddUser(AddUserRequest) returns(AddUserResponse);
  rpc AddUserToGroup(AddUserToGroupRequest) returns(AddUserToGroupResponse);
  rpc ListUser(ListUserRequest) returns(ListUserResponse);
}